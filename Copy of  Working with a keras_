{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of  Working with a keras ","provenance":[{"file_id":"1UvGFtmZKna3dDAoJC95AA2sM4yQkIboW","timestamp":1635756896781},{"file_id":"1j-54Ly-4tbfnX5u0iQwahT94GfCU5hol","timestamp":1635756862250},{"file_id":"https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/chapter07_working-with-keras.ipynb","timestamp":1635756802890}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dRnlTH4Vs9zZ"},"source":["This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n","\n","**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n","\n","This notebook was generated for TensorFlow 2.6."]},{"cell_type":"markdown","metadata":{"id":"JWzEhK4-s9zi"},"source":["# Working with Keras: A deep dive"]},{"cell_type":"markdown","metadata":{"id":"pgC3gxmrs9zj"},"source":["## A spectrum of workflows"]},{"cell_type":"markdown","metadata":{"id":"PDwqv4TKs9zk"},"source":["## Different ways to build Keras models"]},{"cell_type":"markdown","metadata":{"id":"D-FiyAbws9zl"},"source":["### The Sequential model"]},{"cell_type":"markdown","metadata":{"id":"u1OZM31Zs9zl"},"source":["**The `Sequential` class**"]},{"cell_type":"code","metadata":{"id":"n9zzoYSns9zm"},"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","model = keras.Sequential([\n","    layers.Dense(64, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5h6q6HChs9zp"},"source":["**Incrementally building a Sequential model**"]},{"cell_type":"code","metadata":{"id":"r8l4Wfgvs9zq"},"source":["model = keras.Sequential()\n","model.add(layers.Dense(64, activation=\"relu\"))\n","model.add(layers.Dense(10, activation=\"softmax\"))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WO0im1fSs9zr"},"source":["**Calling a model for the first time to build it**"]},{"cell_type":"code","metadata":{"id":"nK8Dbeljs9zs"},"source":["model.build(input_shape=(None, 3))\n","model.weights"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zKHKCRWOs9zs"},"source":["**The summary method**"]},{"cell_type":"code","metadata":{"id":"454s-iVSs9zt"},"source":["model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cQkv6FSvs9zt"},"source":["**Naming models and layers with the `name` argument**"]},{"cell_type":"code","metadata":{"id":"9KS2WVXcs9zu"},"source":["model = keras.Sequential(name=\"my_example_model\")\n","model.add(layers.Dense(64, activation=\"relu\", name=\"my_first_layer\"))\n","model.add(layers.Dense(10, activation=\"softmax\", name=\"my_last_layer\"))\n","model.build((None, 3))\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zDl3Ggcws9zv"},"source":["**Specifying the input shape of your model in advance**"]},{"cell_type":"code","metadata":{"id":"CyPna4Lvs9zv"},"source":["model = keras.Sequential()\n","model.add(keras.Input(shape=(3,)))\n","model.add(layers.Dense(64, activation=\"relu\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RMCwTaVLs9zw"},"source":["model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ot2UUXxDs9zw"},"source":["model.add(layers.Dense(10, activation=\"softmax\"))\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y0zwWJN1s9zx"},"source":["### The Functional API"]},{"cell_type":"markdown","metadata":{"id":"uDbAsjEis9zx"},"source":["#### A simple example"]},{"cell_type":"markdown","metadata":{"id":"W8S5UBq5s9zx"},"source":["**A simple Functional model with two `Dense` layers**"]},{"cell_type":"code","metadata":{"id":"ZuQ_FKZUs9zy"},"source":["inputs = keras.Input(shape=(3,), name=\"my_input\")\n","features = layers.Dense(64, activation=\"relu\")(inputs)\n","outputs = layers.Dense(10, activation=\"softmax\")(features)\n","model = keras.Model(inputs=inputs, outputs=outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hlmy6LGMs9zy"},"source":["inputs = keras.Input(shape=(3,), name=\"my_input\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6_ja1Yews9zz"},"source":["inputs.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bacvctjls9zz"},"source":["inputs.dtype"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1u1vcerws9z0"},"source":["features = layers.Dense(64, activation=\"relu\")(inputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mfWtelvos9z0"},"source":["features.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"40NNZlchs9z0"},"source":["outputs = layers.Dense(10, activation=\"softmax\")(features)\n","model = keras.Model(inputs=inputs, outputs=outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RWGuzBOns9z1"},"source":["model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hk_8dNyZs9z1"},"source":["#### Multi-input, multi-output models"]},{"cell_type":"markdown","metadata":{"id":"lmS9xBzQs9z2"},"source":["**A multi-input, multi-output Functional model**"]},{"cell_type":"code","metadata":{"id":"W_GsS6uvs9z2"},"source":["vocabulary_size = 10000\n","num_tags = 100\n","num_departments = 4\n","\n","title = keras.Input(shape=(vocabulary_size,), name=\"title\")\n","text_body = keras.Input(shape=(vocabulary_size,), name=\"text_body\")\n","tags = keras.Input(shape=(num_tags,), name=\"tags\")\n","\n","features = layers.Concatenate()([title, text_body, tags])\n","features = layers.Dense(64, activation=\"relu\")(features)\n","\n","priority = layers.Dense(1, activation=\"sigmoid\", name=\"priority\")(features)\n","department = layers.Dense(\n","    num_departments, activation=\"softmax\", name=\"department\")(features)\n","\n","model = keras.Model(inputs=[title, text_body, tags], outputs=[priority, department])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RdeRU9Z9s9z3"},"source":["#### Training a multi-input, multi-output model"]},{"cell_type":"markdown","metadata":{"id":"t3qda1jts9z4"},"source":["**Training a model by providing lists of input & target arrays**"]},{"cell_type":"code","metadata":{"id":"ldyBFxJZs9z4"},"source":["import numpy as np\n","\n","num_samples = 1280\n","\n","title_data = np.random.randint(0, 2, size=(num_samples, vocabulary_size))\n","text_body_data = np.random.randint(0, 2, size=(num_samples, vocabulary_size))\n","tags_data = np.random.randint(0, 2, size=(num_samples, num_tags))\n","\n","priority_data = np.random.random(size=(num_samples, 1))\n","department_data = np.random.randint(0, 2, size=(num_samples, num_departments))\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=[\"mean_squared_error\", \"categorical_crossentropy\"],\n","              metrics=[[\"mean_absolute_error\"], [\"accuracy\"]])\n","model.fit([title_data, text_body_data, tags_data],\n","          [priority_data, department_data],\n","          epochs=1)\n","model.evaluate([title_data, text_body_data, tags_data],\n","               [priority_data, department_data])\n","priority_preds, department_preds = model.predict([title_data, text_body_data, tags_data])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WryWxenhs9z5"},"source":["**Training a model by providing dicts of input & target arrays**"]},{"cell_type":"code","metadata":{"id":"lWNgRzHfs9z6"},"source":["model.compile(optimizer=\"rmsprop\",\n","              loss={\"priority\": \"mean_squared_error\", \"department\": \"categorical_crossentropy\"},\n","              metrics={\"priority\": [\"mean_absolute_error\"], \"department\": [\"accuracy\"]})\n","model.fit({\"title\": title_data, \"text_body\": text_body_data, \"tags\": tags_data},\n","          {\"priority\": priority_data, \"department\": department_data},\n","          epochs=1)\n","model.evaluate({\"title\": title_data, \"text_body\": text_body_data, \"tags\": tags_data},\n","               {\"priority\": priority_data, \"department\": department_data})\n","priority_preds, department_preds = model.predict(\n","    {\"title\": title_data, \"text_body\": text_body_data, \"tags\": tags_data})"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WuCkTYVJs9z6"},"source":["#### The power of the Functional API: Access to layer connectivity"]},{"cell_type":"code","metadata":{"id":"JJIFnOZjs9z7"},"source":["keras.utils.plot_model(model, \"ticket_classifier.png\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wsbcmH8Os9z7"},"source":["keras.utils.plot_model(model, \"ticket_classifier_with_shape_info.png\", show_shapes=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o_kCGmrDs9z7"},"source":["**Retrieving the inputs or outputs of a layer in a Functional model**"]},{"cell_type":"code","metadata":{"id":"TMkTkI1Ns9z8"},"source":["model.layers"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nmwcZkCgs9z8"},"source":["model.layers[3].input"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MmeAOcecs9z8"},"source":["model.layers[3].output"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ODn0YBW0s9z9"},"source":["**Creating a new model by reusing intermediate layer outputs**"]},{"cell_type":"code","metadata":{"id":"tvmeC2Los9z9"},"source":["features = model.layers[4].output\n","difficulty = layers.Dense(3, activation=\"softmax\", name=\"difficulty\")(features)\n","\n","new_model = keras.Model(\n","    inputs=[title, text_body, tags],\n","    outputs=[priority, department, difficulty])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zIVqQDY5s9z-"},"source":["keras.utils.plot_model(new_model, \"updated_ticket_classifier.png\", show_shapes=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3Zkh6MnXs9z-"},"source":["### Subclassing the Model class"]},{"cell_type":"markdown","metadata":{"id":"SnbQIZhXs9z-"},"source":["#### Rewriting our previous example as a subclassed model"]},{"cell_type":"markdown","metadata":{"id":"_5TH3SZJs9z-"},"source":["**A simple subclassed model**"]},{"cell_type":"code","metadata":{"id":"paCVTXi-s9z_"},"source":["class CustomerTicketModel(keras.Model):\n","\n","    def __init__(self, num_departments):\n","        super().__init__()\n","        self.concat_layer = layers.Concatenate()\n","        self.mixing_layer = layers.Dense(64, activation=\"relu\")\n","        self.priority_scorer = layers.Dense(1, activation=\"sigmoid\")\n","        self.department_classifier = layers.Dense(\n","            num_departments, activation=\"softmax\")\n","\n","    def call(self, inputs):\n","        title = inputs[\"title\"]\n","        text_body = inputs[\"text_body\"]\n","        tags = inputs[\"tags\"]\n","\n","        features = self.concat_layer([title, text_body, tags])\n","        features = self.mixing_layer(features)\n","        priority = self.priority_scorer(features)\n","        department = self.department_classifier(features)\n","        return priority, department"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7sCNUls1s9z_"},"source":["model = CustomerTicketModel(num_departments=4)\n","\n","priority, department = model(\n","    {\"title\": title_data, \"text_body\": text_body_data, \"tags\": tags_data})"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dOrEUwOcs90A"},"source":["model.compile(optimizer=\"rmsprop\",\n","              loss=[\"mean_squared_error\", \"categorical_crossentropy\"],\n","              metrics=[[\"mean_absolute_error\"], [\"accuracy\"]])\n","model.fit({\"title\": title_data,\n","           \"text_body\": text_body_data,\n","           \"tags\": tags_data},\n","          [priority_data, department_data],\n","          epochs=1)\n","model.evaluate({\"title\": title_data,\n","                \"text_body\": text_body_data,\n","                \"tags\": tags_data},\n","               [priority_data, department_data])\n","priority_preds, department_preds = model.predict({\"title\": title_data,\n","                                                  \"text_body\": text_body_data,\n","                                                  \"tags\": tags_data})"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wllOfJFzs90A"},"source":["#### Beware: What subclassed models don't support"]},{"cell_type":"markdown","metadata":{"id":"ZGM1BFL_s90B"},"source":["### Mixing and matching different components"]},{"cell_type":"markdown","metadata":{"id":"uujr_yAys90B"},"source":["**Creating a Functional model that includes a subclassed model**"]},{"cell_type":"code","metadata":{"id":"TlXi9gXls90B"},"source":["class Classifier(keras.Model):\n","\n","    def __init__(self, num_classes=2):\n","        super().__init__()\n","        if num_classes == 2:\n","            num_units = 1\n","            activation = \"sigmoid\"\n","        else:\n","            num_units = num_classes\n","            activation = \"softmax\"\n","        self.dense = layers.Dense(num_units, activation=activation)\n","\n","    def call(self, inputs):\n","        return self.dense(inputs)\n","\n","inputs = keras.Input(shape=(3,))\n","features = layers.Dense(64, activation=\"relu\")(inputs)\n","outputs = Classifier(num_classes=10)(features)\n","model = keras.Model(inputs=inputs, outputs=outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hcct4-uOs90C"},"source":["**Creating a subclassed model that includes a Functional model**"]},{"cell_type":"code","metadata":{"id":"DbArrUxxs90C"},"source":["inputs = keras.Input(shape=(64,))\n","outputs = layers.Dense(1, activation=\"sigmoid\")(inputs)\n","binary_classifier = keras.Model(inputs=inputs, outputs=outputs)\n","\n","class MyModel(keras.Model):\n","\n","    def __init__(self, num_classes=2):\n","        super().__init__()\n","        self.dense = layers.Dense(64, activation=\"relu\")\n","        self.classifier = binary_classifier\n","\n","    def call(self, inputs):\n","        features = self.dense(inputs)\n","        return self.classifier(features)\n","\n","model = MyModel()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KV-bJB1Ms90C"},"source":["### Remember: Use the right tool for the job"]},{"cell_type":"markdown","metadata":{"id":"BhitZotas90D"},"source":["## Using built-in training and evaluation loops"]},{"cell_type":"markdown","metadata":{"id":"mkmshAg4s90D"},"source":["**The standard workflow: `compile()`, `fit()`, `evaluate()`, `predict()`**"]},{"cell_type":"code","metadata":{"id":"JCsYydbLs90D"},"source":["from tensorflow.keras.datasets import mnist\n","\n","def get_mnist_model():\n","    inputs = keras.Input(shape=(28 * 28,))\n","    features = layers.Dense(512, activation=\"relu\")(inputs)\n","    features = layers.Dropout(0.5)(features)\n","    outputs = layers.Dense(10, activation=\"softmax\")(features)\n","    model = keras.Model(inputs, outputs)\n","    return model\n","\n","(images, labels), (test_images, test_labels) = mnist.load_data()\n","images = images.reshape((60000, 28 * 28)).astype(\"float32\") / 255\n","test_images = test_images.reshape((10000, 28 * 28)).astype(\"float32\") / 255\n","train_images, val_images = images[10000:], images[:10000]\n","train_labels, val_labels = labels[10000:], labels[:10000]\n","\n","model = get_mnist_model()\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=3,\n","          validation_data=(val_images, val_labels))\n","test_metrics = model.evaluate(test_images, test_labels)\n","predictions = model.predict(test_images)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"44cEVqMKs90E"},"source":["### Writing your own metrics"]},{"cell_type":"markdown","metadata":{"id":"9JUHbsiYs90E"},"source":["**Implementing a custom metric by subclassing the `Metric` class**"]},{"cell_type":"code","metadata":{"id":"rTGkpIXGs90E"},"source":["import tensorflow as tf\n","\n","class RootMeanSquaredError(keras.metrics.Metric):\n","\n","    def __init__(self, name=\"rmse\", **kwargs):\n","        super().__init__(name=name, **kwargs)\n","        self.mse_sum = self.add_weight(name=\"mse_sum\", initializer=\"zeros\")\n","        self.total_samples = self.add_weight(\n","            name=\"total_samples\", initializer=\"zeros\", dtype=\"int32\")\n","\n","    def update_state(self, y_true, y_pred, sample_weight=None):\n","        y_true = tf.one_hot(y_true, depth=tf.shape(y_pred)[1])\n","        mse = tf.reduce_sum(tf.square(y_true - y_pred))\n","        self.mse_sum.assign_add(mse)\n","        num_samples = tf.shape(y_pred)[0]\n","        self.total_samples.assign_add(num_samples)\n","\n","    def result(self):\n","        return tf.sqrt(self.mse_sum / tf.cast(self.total_samples, tf.float32))\n","\n","    def reset_state(self):\n","        self.mse_sum.assign(0.)\n","        self.total_samples.assign(0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jcwm_qDxs90F"},"source":["model = get_mnist_model()\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\", RootMeanSquaredError()])\n","model.fit(train_images, train_labels,\n","          epochs=3,\n","          validation_data=(val_images, val_labels))\n","test_metrics = model.evaluate(test_images, test_labels)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZkTRubNOs90G"},"source":["### Using callbacks"]},{"cell_type":"markdown","metadata":{"id":"zxHV6jvqs90G"},"source":["#### The EarlyStopping and ModelCheckpoint callbacks"]},{"cell_type":"markdown","metadata":{"id":"i7oaVOGys90H"},"source":["**Using the `callbacks` argument in the `fit()` method**"]},{"cell_type":"code","metadata":{"id":"eIwZr04Ks90H"},"source":["callbacks_list = [\n","    keras.callbacks.EarlyStopping(\n","        monitor=\"val_accuracy\",\n","        patience=2,\n","    ),\n","    keras.callbacks.ModelCheckpoint(\n","        filepath=\"checkpoint_path.keras\",\n","        monitor=\"val_loss\",\n","        save_best_only=True,\n","    )\n","]\n","model = get_mnist_model()\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          callbacks=callbacks_list,\n","          validation_data=(val_images, val_labels))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mYD90-IRs90H"},"source":["model = keras.models.load_model(\"checkpoint_path.keras\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x-F2Ndrns90I"},"source":["### Writing your own callbacks"]},{"cell_type":"markdown","metadata":{"id":"hFWXaKjIs90I"},"source":["**Creating a custom callback by subclassing the `Callback` class**"]},{"cell_type":"code","metadata":{"id":"3xhXX9--s90J"},"source":["from matplotlib import pyplot as plt\n","\n","class LossHistory(keras.callbacks.Callback):\n","    def on_train_begin(self, logs):\n","        self.per_batch_losses = []\n","\n","    def on_batch_end(self, batch, logs):\n","        self.per_batch_losses.append(logs.get(\"loss\"))\n","\n","    def on_epoch_end(self, epoch, logs):\n","        plt.clf()\n","        plt.plot(range(len(self.per_batch_losses)), self.per_batch_losses,\n","                 label=\"Training loss for each batch\")\n","        plt.xlabel(f\"Batch (epoch {epoch})\")\n","        plt.ylabel(\"Loss\")\n","        plt.legend()\n","        plt.savefig(f\"plot_at_epoch_{epoch}\")\n","        self.per_batch_losses = []"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A-IBfzA-s90J"},"source":["model = get_mnist_model()\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          callbacks=[LossHistory()],\n","          validation_data=(val_images, val_labels))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pXMidxJus90K"},"source":["### Monitoring and visualization with TensorBoard"]},{"cell_type":"code","metadata":{"id":"8Hwwii7_s90K"},"source":["model = get_mnist_model()\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","tensorboard = keras.callbacks.TensorBoard(\n","    log_dir=\"/full_path_to_your_log_dir\",\n",")\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          validation_data=(val_images, val_labels),\n","          callbacks=[tensorboard])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ault5l1ms90L"},"source":["%load_ext tensorboard\n","%tensorboard --logdir /full_path_to_your_log_dir"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0jIkCxkRs90L"},"source":["## Writing your own training and evaluation loops"]},{"cell_type":"markdown","metadata":{"id":"zbl714XDs90L"},"source":["### Training versus inference"]},{"cell_type":"markdown","metadata":{"id":"EsXrJZlMs90M"},"source":["### Low-level usage of metrics"]},{"cell_type":"code","metadata":{"id":"mUyIMXAYs90M"},"source":["metric = keras.metrics.SparseCategoricalAccuracy()\n","targets = [0, 1, 2]\n","predictions = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n","metric.update_state(targets, predictions)\n","current_result = metric.result()\n","print(f\"result: {current_result:.2f}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CXry6-uis90M"},"source":["values = [0, 1, 2, 3, 4]\n","mean_tracker = keras.metrics.Mean()\n","for value in values:\n","    mean_tracker.update_state(value)\n","print(f\"Mean of values: {mean_tracker.result():.2f}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AFc635WYs90N"},"source":["### A complete training and evaluation loop"]},{"cell_type":"markdown","metadata":{"id":"nS_9YaE1s90N"},"source":["**Writing a step-by-step training loop: the training step function**"]},{"cell_type":"code","metadata":{"id":"cOpkzql-s90N"},"source":["model = get_mnist_model()\n","\n","loss_fn = keras.losses.SparseCategoricalCrossentropy()\n","optimizer = keras.optimizers.RMSprop()\n","metrics = [keras.metrics.SparseCategoricalAccuracy()]\n","loss_tracking_metric = keras.metrics.Mean()\n","\n","def train_step(inputs, targets):\n","    with tf.GradientTape() as tape:\n","        predictions = model(inputs, training=True)\n","        loss = loss_fn(targets, predictions)\n","    gradients = tape.gradient(loss, model.trainable_weights)\n","    optimizer.apply_gradients(zip(gradients, model.trainable_weights))\n","\n","    logs = {}\n","    for metric in metrics:\n","        metric.update_state(targets, predictions)\n","        logs[metric.name] = metric.result()\n","\n","    loss_tracking_metric.update_state(loss)\n","    logs[\"loss\"] = loss_tracking_metric.result()\n","    return logs"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SJMwTXaLs90O"},"source":["**Writing a step-by-step training loop: resetting the metrics**"]},{"cell_type":"code","metadata":{"id":"276Jvwpss90O"},"source":["def reset_metrics():\n","    for metric in metrics:\n","        metric.reset_state()\n","    loss_tracking_metric.reset_state()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MVOVmQJgs90O"},"source":["**Writing a step-by-step training loop: the loop itself**"]},{"cell_type":"code","metadata":{"id":"plUspvOUs90P"},"source":["training_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels))\n","training_dataset = training_dataset.batch(32)\n","epochs = 3\n","for epoch in range(epochs):\n","    reset_metrics()\n","    for inputs_batch, targets_batch in training_dataset:\n","        logs = train_step(inputs_batch, targets_batch)\n","    print(f\"Results at the end of epoch {epoch}\")\n","    for key, value in logs.items():\n","        print(f\"...{key}: {value:.4f}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tNTR5e0-s90P"},"source":["**Writing a step-by-step evaluation loop**"]},{"cell_type":"code","metadata":{"id":"j5-et7Vys90P"},"source":["def test_step(inputs, targets):\n","    predictions = model(inputs, training=False)\n","    loss = loss_fn(targets, predictions)\n","\n","    logs = {}\n","    for metric in metrics:\n","        metric.update_state(targets, predictions)\n","        logs[\"val_\" + metric.name] = metric.result()\n","\n","    loss_tracking_metric.update_state(loss)\n","    logs[\"val_loss\"] = loss_tracking_metric.result()\n","    return logs\n","\n","val_dataset = tf.data.Dataset.from_tensor_slices((val_images, val_labels))\n","val_dataset = val_dataset.batch(32)\n","reset_metrics()\n","for inputs_batch, targets_batch in val_dataset:\n","    logs = test_step(inputs_batch, targets_batch)\n","print(\"Evaluation results:\")\n","for key, value in logs.items():\n","    print(f\"...{key}: {value:.4f}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wOmkG0nxs90Q"},"source":["### Make it fast with tf.function"]},{"cell_type":"markdown","metadata":{"id":"PlWV7q1Ls90Q"},"source":["**Adding a `tf.function` decorator to our evaluation-step function**"]},{"cell_type":"code","metadata":{"id":"Jgyt00vGs90R"},"source":["@tf.function\n","def test_step(inputs, targets):\n","    predictions = model(inputs, training=False)\n","    loss = loss_fn(targets, predictions)\n","\n","    logs = {}\n","    for metric in metrics:\n","        metric.update_state(targets, predictions)\n","        logs[\"val_\" + metric.name] = metric.result()\n","\n","    loss_tracking_metric.update_state(loss)\n","    logs[\"val_loss\"] = loss_tracking_metric.result()\n","    return logs\n","\n","val_dataset = tf.data.Dataset.from_tensor_slices((val_images, val_labels))\n","val_dataset = val_dataset.batch(32)\n","reset_metrics()\n","for inputs_batch, targets_batch in val_dataset:\n","    logs = test_step(inputs_batch, targets_batch)\n","print(\"Evaluation results:\")\n","for key, value in logs.items():\n","    print(f\"...{key}: {value:.4f}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CQAVOO6Ss90R"},"source":["### Leveraging fit() with a custom training loop"]},{"cell_type":"markdown","metadata":{"id":"SWOzHs8zs90S"},"source":["**Implementing a custom training step to use with `fit()`**"]},{"cell_type":"code","metadata":{"id":"x4I9Fzqfs90S"},"source":["loss_fn = keras.losses.SparseCategoricalCrossentropy()\n","loss_tracker = keras.metrics.Mean(name=\"loss\")\n","\n","class CustomModel(keras.Model):\n","    def train_step(self, data):\n","        inputs, targets = data\n","        with tf.GradientTape() as tape:\n","            predictions = self(inputs, training=True)\n","            loss = loss_fn(targets, predictions)\n","        gradients = tape.gradient(loss, model.trainable_weights)\n","        optimizer.apply_gradients(zip(gradients, model.trainable_weights))\n","\n","        loss_tracker.update_state(loss)\n","        return {\"loss\": loss_tracker.result()}\n","\n","    @property\n","    def metrics(self):\n","        return [loss_tracker]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QZrLxQAbs90T"},"source":["inputs = keras.Input(shape=(28 * 28,))\n","features = layers.Dense(512, activation=\"relu\")(inputs)\n","features = layers.Dropout(0.5)(features)\n","outputs = layers.Dense(10, activation=\"softmax\")(features)\n","model = CustomModel(inputs, outputs)\n","\n","model.compile(optimizer=keras.optimizers.RMSprop())\n","model.fit(train_images, train_labels, epochs=3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g12YBakIs90c"},"source":["class CustomModel(keras.Model):\n","    def train_step(self, data):\n","        inputs, targets = data\n","        with tf.GradientTape() as tape:\n","            predictions = self(inputs, training=True)\n","            loss = self.compiled_loss(targets, predictions)\n","        gradients = tape.gradient(loss, model.trainable_weights)\n","        optimizer.apply_gradients(zip(gradients, model.trainable_weights))\n","        self.compiled_metrics.update_state(targets, predictions)\n","        return {m.name: m.result() for m in self.metrics}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PPqt2tvCs90d"},"source":["inputs = keras.Input(shape=(28 * 28,))\n","features = layers.Dense(512, activation=\"relu\")(inputs)\n","features = layers.Dropout(0.5)(features)\n","outputs = layers.Dense(10, activation=\"softmax\")(features)\n","model = CustomModel(inputs, outputs)\n","\n","model.compile(optimizer=keras.optimizers.RMSprop(),\n","              loss=keras.losses.SparseCategoricalCrossentropy(),\n","              metrics=[keras.metrics.SparseCategoricalAccuracy()])\n","model.fit(train_images, train_labels, epochs=3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O-3R5V9hs90d"},"source":["## Summary"]}]}